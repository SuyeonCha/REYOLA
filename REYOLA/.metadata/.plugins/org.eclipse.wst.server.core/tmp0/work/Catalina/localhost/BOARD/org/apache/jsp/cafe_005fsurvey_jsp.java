/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2018-06-21 14:57:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.File;

public final class cafe_005fsurvey_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.io.FileReader");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>카페결과</title>\r\n");
      out.write("<style>\r\n");
      out.write("body{\r\n");
      out.write("\tborder:10px solid #FFCD12;\r\n");
      out.write("}\r\n");
      out.write(".hGraph ul {\r\n");
      out.write("\tmargin: 0 50px 0 50px;\r\n");
      out.write("\tpadding: 1px 0 0 0;\r\n");
      out.write("\tborder: 1px solid #ddd;\r\n");
      out.write("\tborder-top: 0;\r\n");
      out.write("\tborder-right: 0;\r\n");
      out.write("\tfont-size: 11px;\r\n");
      out.write("\tfont-family: Tahoma, Geneva, sans-serif;\r\n");
      out.write("\tlist-style: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".hGraph li {\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\tmargin: 10px 0;\r\n");
      out.write("\twhite-space: nowrap;\r\n");
      out.write("\tvertical-align: top;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".hGraph .gTerm {\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\twidth: 40px;\r\n");
      out.write("\ttop: 0;\r\n");
      out.write("\tleft: -170px;\r\n");
      out.write("\tline-height: 20px;\r\n");
      out.write("\ttext-align: right;\r\n");
      out.write("\tcolor: #767676;\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("\r\n");
      out.write("\tpadding-right:200px;\r\n");
      out.write("\tfont-size:11pt;\r\n");
      out.write("}\r\n");
      out.write(".hGraph{\r\n");
      out.write("\tpadding-left:130px;\r\n");
      out.write("}\r\n");
      out.write(".hGraph .gBar {\r\n");
      out.write("\tmargin-top:5px;\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\tdisplay: inline-block;\r\n");
      out.write("\theight: 20px;\r\n");
      out.write("\tborder: 1px solid #ccc;\r\n");
      out.write("\tborder-left: 0;\r\n");
      out.write("\tbackground: #FFCD12;\r\n");
      out.write("}\r\n");
      out.write("<!--숫자-->\r\n");
      out.write(".hGraph .gBar span {\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\twidth: 40px;\r\n");
      out.write("\tline-height: 20px;\r\n");
      out.write("\ttop: 0;\r\n");
      out.write("\tright: -50px;\r\n");
      out.write("\tcolor: #767676;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t");

		request.setCharacterEncoding("UTF-8"); // post방식일 때 무조건 사용해야 함.
		String[] value = request.getParameterValues("cafe");
		String[] filenames = {};
		int i = 0;
		int num = 0;
		PrintWriter writer = null;
		String result;

		//중복처리
		String dirPath = application.getRealPath("/WEB-INF/cafe");
		File dir = new File(dirPath);
		String filename[] = dir.list();
		BufferedReader reader = null;
		
		for (; i < value.length; i++) {
			try {
				for (int j = 0; j < filename.length; j++) {

						if (value[i].equals(filename[j])) {
							
							String same = application.getRealPath("/WEB-INF/cafe/" + value[i]);
							reader = new BufferedReader(new FileReader(same));
					 		String str = reader.readLine();
					 		num=Integer.parseInt(str);

						}

				}

				String filePath = application.getRealPath("/WEB-INF/cafe/" + value[i]);
				writer = new PrintWriter(filePath);

				writer.printf("%d", 1 + num);

				writer.flush();
				result = "ok";
			} catch (Exception e) {
				out.println("오류발생");
				result = "fail";
			}
		}
		
	
      out.write("\r\n");
      out.write("<div class=\"hGraph\">\r\n");
      out.write("\t<ul>\r\n");

	String dirPath2 = application.getRealPath("/WEB-INF/cafe");
	File dir2 = new File(dirPath2);
	String filenames2[] = dir2.list();

	for(int j = 0; j < filenames2.length; j++){

      out.write("\r\n");
      out.write("\t\t\t<li><span class=\"gTerm\">\r\n");

			out.print(filenames2[j]);

      out.write("\r\n");
      out.write("\t\t</span>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<span class=\"gBar\" \r\n");
      out.write("\t\t");

		BufferedReader reader2 = null;
	 	try {
	 		String filePath = application.getRealPath("/WEB-INF/cafe/" + filenames2[j]);

	 		reader2 = new BufferedReader(new FileReader(filePath));
	 		while (true) {
	 			String str = reader2.readLine();
	 			int num2 = Integer.parseInt(str);
	 			if (str == null)
	 				break;
	 			if(num2 > 10)
	 				num2=10;
	 				
      out.write("\r\n");
      out.write("\t \t\t\tstyle=\"width:");
 out.print(num2*10+"%");
      out.write("\"><span><b>\r\n");
      out.write("\t \t\t\t");

	 			out.print(Integer.parseInt(str)+"표");
	 		}

	 	} catch (Exception e) {
	 		
	 	} finally {
	 		reader2.close();
	 	}

      out.write("\r\n");
      out.write("\t</b></span></span></li><br/>");
 } 
      out.write("\r\n");
      out.write("\t</ul>\r\n");
      out.write("</div>\r\n");
      out.write("<br/>\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script> \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
