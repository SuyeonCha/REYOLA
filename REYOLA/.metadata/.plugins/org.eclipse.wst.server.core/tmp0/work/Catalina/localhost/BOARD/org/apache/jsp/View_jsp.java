/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2018-06-21 14:55:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.*;

public final class View_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>View</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("\tbackground-image: url(\"img/bg.jpg\");\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script language=\"javascript\">\r\n");
      out.write("\r\n");
int idx = Integer.parseInt(request.getParameter("idx"));
      out.write("\r\n");
      out.write("\tfunction re()\r\n");
      out.write("\t  {\r\n");
      out.write("\t   var form = document.rewriteform;\r\n");
      out.write("\t   \r\n");
      out.write("\t   if( !form.rename.value )   // form 에 있는 name 값이 없을 때\r\n");
      out.write("\t   {\r\n");
      out.write("\t    alert( \"이름을 적어주세요\" ); // 경고창 띄움\r\n");
      out.write("\t    form.rename.focus();   // form 에 있는 name 위치로 이동\r\n");
      out.write("\t    return;\r\n");
      out.write("\t   }\r\n");
      out.write("\t   \r\n");
      out.write("\t   if( !form.repassword.value )\r\n");
      out.write("\t   {\r\n");
      out.write("\t    alert( \"비밀번호를 적어주세요\" );\r\n");
      out.write("\t    form.repassword.focus();\r\n");
      out.write("\t    return;\r\n");
      out.write("\t   }\r\n");
      out.write("\r\n");
      out.write("\t  if( !form.recomment.value )\r\n");
      out.write("\t   {\r\n");
      out.write("\t    alert( \"내용을 적어주세요\" );\r\n");
      out.write("\t    form.recomment.focus();\r\n");
      out.write("\t    return;\r\n");
      out.write("\t   }\r\n");
      out.write("\t \r\n");
      out.write("\t  form.submit(); }\r\n");
      out.write("\tfunction del() {\r\n");
      out.write("\t\tvar url = \"delete.jsp?idx=");
      out.print(idx);
      out.write("\";\r\n");
      out.write("\t\twindow.open(url, '',\r\n");
      out.write("\t\t\t\t'width=400, height=170, left= 30, top=200, scrollbars=no');\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("<link href=\"css/View_css.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<center>\r\n");

			// 데이터베이스 접속을 위한 클래스
			Connection conn = null;
			// 접속 후 질의문을 실행시킬 클래스
			java.sql.Statement st = null;
			java.sql.Statement st2 = null;
			// 질의문에 대한 결과값이 있는 클래스
			ResultSet rs = null;

			try {
				Class.forName("com.mysql.jdbc.Driver");

				conn = DriverManager.getConnection("jdbc:mysql://localhost:3306", "root", "1234");
				st = conn.createStatement();
				st2 = conn.createStatement();
				st.execute("use yolo;");
				st2.execute("use yolo;");// 사용할 DB를 선택한다.
				
				rs = st.executeQuery("SELECT * FROM share where id=" + idx);

				while (rs.next()) {
					int id = rs.getInt(1);
					String name = rs.getString(2);
					String title = rs.getString(4);
					String comment = rs.getString(5);
					String time = rs.getString(6);
					int hit = rs.getInt(7);
					int recommend = rs.getInt(9);
					hit++;
		
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<form name=rewriteform method=\"post\" action=\"rewrite_ok.jsp?idx=");
      out.print(idx);
      out.write("\">\r\n");
      out.write("\t\t\t<div class=tt>\r\n");
      out.write("\t\t\t\t<div class=tit>\r\n");
      out.write("\t\t\t\t\t<h1>");
      out.print(title);
      out.write("</h1>\r\n");
      out.write("\t\t\t\t\t<small class=na>by <b>");
      out.print(name);
      out.write("</b></small> <small class=na>posted\r\n");
      out.write("\t\t\t\t\t\t<b>");
      out.print(time);
      out.write("</b>\r\n");
      out.write("\t\t\t\t\t</small> <small class=na>hit <b>");
      out.print(hit);
      out.write("</b></small>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=cm>\r\n");
      out.write("\t\t\t\t<div class=com>");
      out.print(comment);
      out.write("</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=cm2 align=left>\r\n");
      out.write("\t\t\t\t<input type=button class=list value=\"목록\"\r\n");
      out.write("\t\t\t\t\tOnClick=\"location='Share_Board.jsp'\"> <input type=button\r\n");
      out.write("\t\t\t\t\tclass=list value=\"추천 ");
      out.print(recommend);
      out.write("\" OnClick=\"javascript:pop();\">\r\n");
      out.write("\t\t\t\t<input type=button class=list2 value=\"수정\"\r\n");
      out.write("\t\t\t\t\tOnClick=\"location='modify.jsp?idx=");
      out.print(idx);
      out.write("'\"> <input\r\n");
      out.write("\t\t\t\t\ttype=button class=list2 value=\"삭제\" OnClick=\"del()\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t<div class=cm>\r\n");
      out.write("\t\t\t<p></p>\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Share_List.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t");

			st2.executeUpdate("UPDATE share set HIT=" + hit + " where id=" + idx);
				}
			} catch (Exception e) {
				e.printStackTrace();
				// try, catch 문 실행 완료 후 실행되는 데 사용객체들을 닫아준다.
			} finally {
				if (rs != null)
					rs.close();
				if (st != null)
					st.close();
				if (conn != null)
					conn.close();
			}
		
      out.write("\r\n");
      out.write("\t</center>\r\n");
      out.write("\t<script>\r\n");
      out.write("function pop() {\r\n");
      out.write("\t");

	Connection conn3 = null;
	java.sql.Statement st3 = null;
	ResultSet rs3 = null;
	
	try {
		Class.forName("com.mysql.jdbc.Driver");

		conn3 = DriverManager.getConnection("jdbc:mysql://localhost:3306", "root", "1234");
		st3 = conn3.createStatement();
		st3.execute("use yolo;");
		
		rs3 = st3.executeQuery("SELECT * FROM share where id=" + idx);
		while (rs3.next()) {
			int recommend = rs3.getInt(9);
			recommend++;
			System.out.println("후"+recommend);
			st3.executeUpdate("UPDATE share set recommend=" + recommend + " where id=" + idx);
		}}catch (Exception e) {
				e.printStackTrace();
				// try, catch 문 실행 완료 후 실행되는 데 사용객체들을 닫아준다.
			} finally {
				if (rs3 != null)
					rs3.close();
				if (st3 != null)
					st3.close();
				if (conn3 != null)
					conn3.close();
			}


	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\talert(\"추천 되었습니다!\");\r\n");
      out.write("\twindow.location.reload();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
