/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2018-06-21 14:56:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Arrays;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.FileReader;
import java.io.BufferedReader;

public final class ShowYOLO_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	public  void swap(int a[], int idx1, int idx2) {
        int temp = a[idx1];
        a[idx1] = a[idx2];
        a[idx2] = temp;
    }   

	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.io.FileWriter");
    _jspx_imports_classes.add("java.io.FileReader");
    _jspx_imports_classes.add("java.io.BufferedReader");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("h1{\r\n");
      out.write("  font-size: 30px;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  text-transform: uppercase;\r\n");
      out.write("  font-weight: 300;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  margin-bottom: 15px;\r\n");
      out.write("}\r\n");
      out.write("h3{\r\n");
      out.write("  font-size: 25px;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  text-transform: uppercase;\r\n");
      out.write("  font-weight: 300;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  margin-bottom: 15px;\r\n");
      out.write("}\r\n");
      out.write("table{\r\n");
      out.write("  width:100%;\r\n");
      out.write("  table-layout: fixed;\r\n");
      out.write("}\r\n");
      out.write(".tbl-header{\r\n");
      out.write("  background-color: rgba(255,255,255,0.3);\r\n");
      out.write(" }\r\n");
      out.write(".tbl-content{\r\n");
      out.write("  height:600px;\r\n");
      out.write("  overflow-x:auto;\r\n");
      out.write("  margin-top: 0px;\r\n");
      out.write("  border: 1px solid rgba(255,255,255,0.3);\r\n");
      out.write("}\r\n");
      out.write("th{\r\n");
      out.write("  padding: 20px 15px;\r\n");
      out.write("  text-align: left;\r\n");
      out.write("  font-weight: 500;\r\n");
      out.write("  font-size: 24px;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  text-transform: uppercase;\r\n");
      out.write("}\r\n");
      out.write("td{\r\n");
      out.write("  padding: 15px;\r\n");
      out.write("  text-align: left;\r\n");
      out.write("  vertical-align:middle;\r\n");
      out.write("  font-weight: 300;\r\n");
      out.write("  font-size: 20px;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  border-bottom: solid 1px rgba(255,255,255,0.1);\r\n");
      out.write("}\r\n");
      out.write("#user td{\r\n");
      out.write("color:yellow;\r\n");
      out.write("font-size: 150%;\r\n");
      out.write("border-bottom: solid 2px rgba(255,255,255,0.5);\r\n");
      out.write("}\r\n");
      out.write("/* demo styles */\r\n");
      out.write("\r\n");
      out.write("@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,300,700);\r\n");
      out.write("body{\r\n");
      out.write("  background: -webkit-linear-gradient(left, #25c481, #25b7c4);\r\n");
      out.write("  background: linear-gradient(to right, #25c481, #25b7c4);\r\n");
      out.write("  font-family: 'Roboto', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("section{\r\n");
      out.write("  margin: 50px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* follow me template */\r\n");
      out.write(".made-with-love {\r\n");
      out.write("  margin-top: 40px;\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("  clear: left;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  font-size: 10px;\r\n");
      out.write("  font-family: arial;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("}\r\n");
      out.write(".made-with-love i {\r\n");
      out.write("  font-style: normal;\r\n");
      out.write("  color: #F50057;\r\n");
      out.write("  font-size: 14px;\r\n");
      out.write("  position: relative;\r\n");
      out.write("  top: 2px;\r\n");
      out.write("}\r\n");
      out.write(".made-with-love a {\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write(".made-with-love a:hover {\r\n");
      out.write("  text-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* for custom scrollbar for webkit browser*/\r\n");
      out.write("\r\n");
      out.write("::-webkit-scrollbar {\r\n");
      out.write("    width: 6px;\r\n");
      out.write("} \r\n");
      out.write("::-webkit-scrollbar-track {\r\n");
      out.write("    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); \r\n");
      out.write("} \r\n");
      out.write("::-webkit-scrollbar-thumb {\r\n");
      out.write("    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); \r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>YOLO 순위</h1>\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write('	');

		// 리스트 불러오기 !!!
		BufferedReader reader = null;
		BufferedReader readerRe = null;
		//	try {
		String filePath = application.getRealPath("/WEB-INF/bbs/checkList.txt");
		reader = new BufferedReader(new FileReader(filePath));
		int countR = 0;
		while (true) {
			String str = reader.readLine();
			if (str == null)
				break;
			countR++;
		}
		String[] names = new String[countR];
		int[] rank = new int[countR];
		int[] checks = new int[countR];
		Arrays.fill(names, "");
		Arrays.fill(rank, 1);
		Arrays.fill(checks, 0);
		int index = 0;
		String[] score = new String[countR];
		String filePathRe = application.getRealPath("/WEB-INF/bbs/checkList.txt");
		readerRe = new BufferedReader(new FileReader(filePathRe));
		while (true) {
			String strRe = readerRe.readLine();
			//out.print("dddd  : "+strRe);
			if (strRe == null)
				break;
			names[index] = strRe.split("\t")[0];
			checks[index] = Integer.parseInt(strRe.split("\t")[1]);
			//out.print("이름 : "+names[index]+" "+checks[index]+"<br>");
			index++;
		}
		String userName=request.getParameter("userName");
		String userCheck=request.getParameter("userCheck");
		String content="";
		if(userName==""){
		}else{
			switch(userCheck){
			case "100": 
				content="님, 올바른 YOLO의 길을 걸어가고 계시네요! <br>응원해요!";
				break;
			case "90": case "80": case "70":
				content="님, 조금만 더 분발하면 돼요! <br>YOLO의 삶을 잘 살고계시네요!";
				break;
			case "60": case "50": case "40": case "30":
				content="님, 체크리스트의 항목을 기억하시나요? <br>그 리스트로 살아본다면 당신 또한 YOLO에 다가갈 수 있어요!";
				break;
			case "20": case "10": 
				content="님, 분발하세요! 그렇지만 꼭 YOLO의 삶을 살지 않아도 된답니다 ! <br>모두의 인생은 소중하니까요 ^-^";
				break;
			case "0": 
				content="님, 혹시 그냥 버튼을 누르신 건 아닌가요? <br>YOLO정도를 셀 수가 없네요!!";
				break;
			}
			out.print("<h3><b>"+userName+"</b>"+content+"</h3>");
		}
		//나보다 높은 점수가 있으면 +1
		for (int i = 0; i < countR; i++) {
			for (int j = i+1; j < countR; j++) {
				if (checks[j] > checks[i]){
					int temp = checks[i];
					checks[i] = checks[j];
					checks[j] = temp;

					String str = names[i];
					names[i] = names[j];
					names[j] = str;
				}
			}
		}
		int count=0;
		for (int i = 0; i < countR; i++) {
			if(i==0){
				count++;
			}
			else if(i>=1){
				if(checks[i]!=checks[i-1]){
					count++;
				}
			}
			if(userName.equals(names[i])){
			score[i]="<tr id='user'><td><b>"+count+"위</b></td> <td>" + names[i]
			+ "</td><td>" + checks[i]+"</td></tr>";
			}else{
				score[i]="<tr><td><b>"+count+"위</b></td> <td>" + names[i]
						+ "</td><td>" + checks[i]+"</td></tr>";
			}
		} 
		out.print("<div class='tbl-header'><table cellpadding='0' cellspacing='0' border='0'><thead>");
		out.print("<tr><th>랭킹</th><th>이름</th><th>점수</th></tr>");
		out.print("</tr></thead></table></div><div class='tbl-content'><table cellpadding='0' cellspacing='0' border='0'><tbody>");
		
		for(int i=0; i<countR; i++){
			out.print(score[i]);
		}
		out.print("</tbody></table></div>");
		//	} catch (Exception e) {
		//	System.out.println(e);
		//	out.println(e);
		//}
		
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
